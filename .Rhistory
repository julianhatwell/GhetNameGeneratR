source("environmentControls.R")
source("environmentControls.R")
source("commonValidations.R")
source("commonActions.R")
source("generateName.R")
ghetInit()
GhetNameEnv$MasterPhonemes
GhetNameEnv
ghetInit()
GhetNameEnv$MasterPhonemes
assign("MasterPhonemes"
, read.csv("MasterPhonemes.txt"
, header = TRUE
, stringsAsFactors = FALSE))
assign("MasterPhonemes", envir = GhetNameEnv
, read.csv("MasterPhonemes.txt"
, header = TRUE
, stringsAsFactors = FALSE))
GhetNameEnv$MasterPhonemes
ghetClose()
rm("MasterPhonemes")
source("environmentControls.R")
source("commonValidations.R")
source("commonActions.R")
source("generateName.R")
GhetNameEnv$MasterPhonemes
ghetClose()
rm(GhetNameEnv)
source("environmentControls.R")
source("commonValidations.R")
source("commonActions.R")
source("generateName.R")
ghetInit()
GhetNameEnv$MasterPhonemes
ghetClose()
rm(GhetNameEnv)
ghetClose <- function() {
# NB Right now concurrency = 1
write.csv(GhetNameEnv$MasterPhonemes, "MasterPhonemes.txt", row.names = FALSE)
rm(.GlobalEnv$GhetNameEnv)
}
ghetInit()
ghetClose()
rm(GhetNameEnv, envir = .GlobalEnv)
ghetInit <- function() {
assign("GhetNameEnv", new.env(), envir=.GlobalEnv)
if (is.null(get0("MasterPhonemes", envir=GhetNameEnv))) {
if (!(file.exists("MasterPhonemes.txt"))) {
stop("Missing Master Phonemes File")
}
assign("MasterPhonemes", envir = GhetNameEnv
, read.csv("MasterPhonemes.txt"
, header = TRUE
, stringsAsFactors = FALSE))
# TO DO - get performance/probablities
}
}
ghetClose <- function() {
# NB Right now concurrency = 1
write.csv(GhetNameEnv$MasterPhonemes, "MasterPhonemes.txt", row.names = FALSE)
rm(GhetNameEnv, envir = .GlobalEnv)
# TO DO - keep all the functions in the environment and get rid of everything on exit
}
ghetInit()
GhetNameEnv
GhetNameEnv$MasterPhonemes
ghetClose()
GhetNameEnv$MasterPhonemes
ghetInit()
generateName(3)
print.ghetName <- function (gN) {
return(gn$name)
}
me <- generateName(3)
me
print.ghetName <- function (gN) {
return(gN$name)
}
me
me$name
print.lm
print.function()
print.function
print.lm()
print.data.frame
print.ghetName <- function (gN) {
print(gN$name)
}
me
print.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- c("Your name is: ", gN$name
,"\n\nThis is a ", gen, " name")
print(output)
}
me
print.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- paste0("Your name is: ", gN$name
,"\n\nThis is a ", gen, " name")
print(output)
}
me
print.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is: ", gN$name
,"\n\nThis is a ", gen, " name")
print(output)
}
me
me$Gender
print.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is: ", gN$name
,"\n\nThis is a ", gen, " name")
print(output)
}
generateName <- function(phonLength, gender = "u", randomness = 1) {
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
lastPhons <- mPhons[mPhons$canBeLast == TRUE, "phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gender
gName$like <- as.logical(NA)
return(gName)
}
me
gen <- ifelse(me$gender == "f", "girl's"
, ifelse(me$gender == "m", "boy's"
, "unisex"))
gen
ifelse("u" == "f", "girl's", "unisex")
ifelse(me$Gender == "f", "girl's", "unisex")
me <- generateName(3)
me
print.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is: ", gN$name
,"\n\nThis is a ", gen, " name")
invisible(output)
}
generateName <- function(phonLength, gender = "u", randomness = 1) {
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
lastPhons <- mPhons[mPhons$canBeLast == TRUE, "phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gender
gName$like <- as.logical(NA)
return(gName)
}
me
print.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is:", gN$name
,"\n\nThis is a", gen, "name")
invisible(output)
}
print.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is:", gN$name
,"\n\nThis is a", gen, "name")
invisible(output)
}
me
GhetNameEnv$MasterPhonemes
GhetNameEnv$MasterPhonemes$canBeMid <- rep(TRUE, nrow(GhetNameEnv$MasterPhonemes))
GhetNameEnv$MasterPhonemes
GhetNameEnv$MasterPhonemes$male <- rep(TRUE, nrow(GhetNameEnv$MasterPhonemes))
GhetNameEnv$MasterPhonemes$female <- rep(TRUE, nrow(GhetNameEnv$MasterPhonemes))
ghetClose()
me$phonList
paste0(me$phonList)
unclass(me$phonList)
paste0(me$phonList, collapse = TRUE)
paste0(me$phonList, collapse = "")
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
}
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
}
me
me[2] <- "ha"
me
print(me)
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
return(gN)
}
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
return(gN)
}
me<- generateName(3)
ghetInit()
me<- generateName(3)
me
me[2] <- "ce"
me
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
return(gN)
}
me
me[2] <- "cee"
me[3] <- "la"
me[2] <- "cÃ©"
