gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gen
gName$like <- as.logical(NA)
# commit the ratings updates
commitPhons(mPhons)
return(gName)
}
saveName <- function(sN) {
if (is.na(sN$like)) sN$like <- FALSE
if (sN$like) {
mPhons <- getMasterPhonemes()
currentLikedFirst <- mPhons[mPhons$phoneme == tolower(sN$phonList[1]), "likedFirst"]
mPhons[mPhons$phoneme == tolower(sN$phonList[1]), "likedFirst"] <- currentLikedFirst + 1
currentLikedMale <- mPhons[mPhons$phoneme == tolower(sN$phonList[sN$phonLength]), "likedMale"]
currentLikedfemale <- mPhons[mPhons$phoneme == tolower(sN$phonList[sN$phonLength]), "likedFemale"]
newLikedMale <- ifelse(sN$gender %in% c("u", "m"), currentLikedMale + 1, currentLikedMale)
newLikedFemale <- ifelse(sN$gender %in% c("u", "f"), currentLikedfemale + 1, currentLikedfemale)
mPhons[mPhons$phoneme == sN$phonList[sN$phonLength], c("likedMale", "likedFemale")] <- c(newLikedMale, newLikedFemale)
if (sN$phonLength > 2) {
for (mid in sN$phonList[-c(1, sN$phonLength)]) {
currentLikedMid <- mPhons[mPhons$phoneme == mid, "likedMid"]
mPhons[mPhons$phoneme == mid, "likedMid"] <- currentLikedMid + 1
}
}
commitPhons(mPhons)
}
}
likeName <- function(lN) {
lN[["like"]] <- TRUE
# this isn't working
}
generateName(3, "u")
generateName(3, "m")
generateName(3, "u")
generateName(3, "m")
print.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is:", gN$name
,"\n\nThis is a", gen, "name")
invisible(output)
}
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
return(gN)
}
includePhon <- function(liked, out) {
if (length(liked) != length(out)) {
stop("liked and out parameters must be same length")
}
n <- length(out)
# check liked and out have same length
# use length as sample size
p <- rbeta(n, liked + 25, out + 25)
b <- as.logical(rbinom(n, 1, p))
return(b)
}
generateName <- function(phonLength, gen = "u", randomness = 1) {
checkGenderAssignment(gen)
gender <- genderAssignment(gen)
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst & includePhon(mPhons$likedFirst, mPhons$outFirst), "phoneme"]
if (gen == "u") lastPhons <- mPhons[(mPhons$maleEnding | mPhons$femaleEnding) & includePhon(mPhons$likedMale + mPhons$likedFemale, mPhons$outMale + mPhons$outFemale), "phoneme"]
if (gen == "m") lastPhons <- mPhons[mPhons$maleEnding & includePhon(mPhons$likedMale, mPhons$outMale), "phoneme"]
if (gen == "f") lastPhons <- mPhons[mPhons$femaleEnding & includePhon(mPhons$likedFemale, mPhons$outFemale), "phoneme"]
first <- sample(firstPhons, 1)
currentOutFirst <- mPhons[mPhons$phoneme == first, "outFirst"]
mPhons[mPhons$phoneme == first, "outFirst"] <- currentOutFirst + 1
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
middle <- mPhons[mPhons$canBeMid & includePhon(mPhons$likedMid, mPhons$outMid), "phoneme"]
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(middle, 1)
currentOutMid <- mPhons[mPhons$phoneme == mid, "outMid"]
mPhons[mPhons$phoneme == mid, "outMid"] <- currentOutMid + 1
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
currentOutMale <- mPhons[mPhons$phoneme == last, "outMale"]
currentOutfemale <- mPhons[mPhons$phoneme == last, "outFemale"]
newOutMale <- ifelse(gen %in% c("u", "m"),  currentOutMale + 1, currentOutMale)
newOutFemale <- ifelse(gen %in% c("u", "f"), currentOutfemale + 1, currentOutfemale)
mPhons[mPhons$phoneme == last, c("outMale", "outFemale")] <- c(newOutMale, newOutFemale)
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gen
gName$like <- as.logical(NA)
# commit the ratings updates
commitPhons(mPhons)
return(gName)
}
saveName <- function(sN) {
if (is.na(sN$like)) sN$like <- FALSE
if (sN$like) {
mPhons <- getMasterPhonemes()
currentLikedFirst <- mPhons[mPhons$phoneme == tolower(sN$phonList[1]), "likedFirst"]
mPhons[mPhons$phoneme == tolower(sN$phonList[1]), "likedFirst"] <- currentLikedFirst + 1
currentLikedMale <- mPhons[mPhons$phoneme == tolower(sN$phonList[sN$phonLength]), "likedMale"]
currentLikedfemale <- mPhons[mPhons$phoneme == tolower(sN$phonList[sN$phonLength]), "likedFemale"]
newLikedMale <- ifelse(sN$gender %in% c("u", "m"), currentLikedMale + 1, currentLikedMale)
newLikedFemale <- ifelse(sN$gender %in% c("u", "f"), currentLikedfemale + 1, currentLikedfemale)
mPhons[mPhons$phoneme == sN$phonList[sN$phonLength], c("likedMale", "likedFemale")] <- c(newLikedMale, newLikedFemale)
if (sN$phonLength > 2) {
for (mid in sN$phonList[-c(1, sN$phonLength)]) {
currentLikedMid <- mPhons[mPhons$phoneme == mid, "likedMid"]
mPhons[mPhons$phoneme == mid, "likedMid"] <- currentLikedMid + 1
}
}
commitPhons(mPhons)
}
}
likeName <- function(lN) {
lN[["like"]] <- TRUE
# this isn't working
}
generateName(3, "m")
generateName(2, "f")
generateName(2, "u")
generateName(4, "u")
n <- generateName(3)
likeName(n)
likeName <- function(lN) {
lN$like <- TRUE
return(lN$like)
}
likeName(n)
likeName <- function(nm) {
nm$like <- TRUE
}
likeName(n)
debug(likeName(n))
debug(likeName)
likeName(n)
debug(likeName)
likeName(n)
nm
nm$like
nm$like <- TRUE
likeName <- function(nm) {
nm$like <- as.logical(1)
}
likeName(n)
n
n$like <- TRUE
saveName(n)
mPhons <- getMasterPhonemes()
mPhons[mPhons$phoneme == "vo"]
mPhons[mPhons$phoneme == "vo",]
addPhonemes <- function(phonDF) {
if (!(is.data.frame(phonDF)) |
(!(ncol(phonDF %>% c(5,13))))) {
stop("You must provide a 5 or 13 column data frame")
}
mPhons <- getMasterPhonemes()
checkFirstAndMid(phonDF[[2]], phonDF[[3]])
sapply(as.character(phonDF$phoneme), checkExistsPhoneme, mPhons$phoneme)
if (ncol(phonDF == 5)) {
cbind(phonDF, rep(0,8))
}
newPhons <- rbind(mPhons, phonDF)
commitPhons(newPhons)
print("Added multiple phonemes to Master Phonemes File")
}
ghetInit()
rm(list=ls())
ghetInit()
ghetInit <- function() {
source("environmentControls.R")
source("commonValidations.R")
source("commonActions.R")
source("generateName.R")
assign("GhetNameEnv", new.env(), envir=.GlobalEnv)
if (is.null(get0("MasterPhonemes", envir=GhetNameEnv))) {
if (!(file.exists("MasterPhonemes.txt"))) {
stop("Missing Master Phonemes File")
}
assign("MasterPhonemes", envir = GhetNameEnv
, read.csv("MasterPhonemes.txt"
, header = TRUE
, stringsAsFactors = FALSE))
}
}
ghetClose <- function() {
# NB Right now concurrency = 1
if (nrow(GhetNameEnv$MasterPhonemes) > 0) {
write.csv(GhetNameEnv$MasterPhonemes, "MasterPhonemes.txt", row.names = FALSE)
}
rm(GhetNameEnv, envir = .GlobalEnv)
# TO DO - keep all the functions in the environment and get rid of everything on exit
}
ghetInit()
generateName(2)
generateName(2)
generateName(2)
GhetNameEnv$MasterPhonemes
rm(list=ls())
ghetInit <- function() {
source("environmentControls.R")
source("commonValidations.R")
source("commonActions.R")
source("generateName.R")
assign("GhetNameEnv", new.env(), envir=.GlobalEnv)
if (is.null(get0("MasterPhonemes", envir=GhetNameEnv))) {
if (!(file.exists("MasterPhonemes.txt"))) {
stop("Missing Master Phonemes File")
}
assign("MasterPhonemes", envir = GhetNameEnv
, read.csv("MasterPhonemes.txt"
, header = TRUE
, stringsAsFactors = FALSE))
}
}
ghetClose <- function() {
# NB Right now concurrency = 1
if (nrow(GhetNameEnv$MasterPhonemes) > 0) {
write.csv(GhetNameEnv$MasterPhonemes, "MasterPhonemes.txt", row.names = FALSE)
}
rm(GhetNameEnv, envir = .GlobalEnv)
# TO DO - keep all the functions in the environment and get rid of everything on exit
}
generateName(2)
ghetInit()
generateName(2)
generateName()
generateName()
generateName()
generateName(2)
ghetInit <- function() {
source("environmentControls.R")
source("commonValidations.R")
source("commonActions.R")
source("generateName.R")
assign("GhetNameEnv", new.env(), envir=.GlobalEnv)
if (is.null(get0("MasterPhonemes", envir=GhetNameEnv))) {
if (!(file.exists("MasterPhonemes.txt"))) {
stop("Missing Master Phonemes File")
}
assign("MasterPhonemes", envir = GhetNameEnv
, read.csv("MasterPhonemes.csv"
, header = TRUE
, stringsAsFactors = FALSE))
}
}
ghetClose <- function() {
# NB Right now concurrency = 1
if (nrow(GhetNameEnv$MasterPhonemes) > 0) {
write.csv(GhetNameEnv$MasterPhonemes, "MasterPhonemes.csv", row.names = FALSE)
}
rm(GhetNameEnv, envir = .GlobalEnv)
# TO DO - keep all the functions in the environment and get rid of everything on exit
}
ghetInit()
generateName(2)
generateName(2)
ghetInit()
generateName()
x <- generateName()
x
x$phonList
x <- generateName()
x
x$phonList
ghetClose()
rm(list=ls())
print.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is:", gN$name
,"\n\nThis is a", gen, "name")
invisible(output)
}
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
return(gN)
}
includePhon <- function(liked, out) {
if (length(liked) != length(out)) {
stop("liked and out parameters must be same length")
}
n <- length(out)
# check liked and out have same length
# use length as sample size
p <- rbeta(n, liked + 25, out + 25)
b <- as.logical(rbinom(n, 1, p))
return(b)
}
generateName <- function(phonLength = 3, gen = "u", randomness = 1) {
checkGenderAssignment(gen)
gender <- genderAssignment(gen)
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst & includePhon(mPhons$likedFirst, mPhons$outFirst), "phoneme"]
if (gen == "u") lastPhons <- mPhons[(mPhons$maleEnding | mPhons$femaleEnding) & includePhon(mPhons$likedMale + mPhons$likedFemale, mPhons$outMale + mPhons$outFemale), "phoneme"]
if (gen == "m") lastPhons <- mPhons[mPhons$maleEnding & includePhon(mPhons$likedMale, mPhons$outMale), "phoneme"]
if (gen == "f") lastPhons <- mPhons[mPhons$femaleEnding & includePhon(mPhons$likedFemale, mPhons$outFemale), "phoneme"]
first <- sample(firstPhons, 1)
currentOutFirst <- mPhons[mPhons$phoneme == first, "outFirst"]
mPhons[mPhons$phoneme == first, "outFirst"] <- currentOutFirst + 1
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
middle <- mPhons[mPhons$canBeMid & includePhon(mPhons$likedMid, mPhons$outMid), "phoneme"]
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(middle, 1)
currentOutMid <- mPhons[mPhons$phoneme == mid, "outMid"]
mPhons[mPhons$phoneme == mid, "outMid"] <- currentOutMid + 1
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
currentOutMale <- mPhons[mPhons$phoneme == last, "outMale"]
currentOutfemale <- mPhons[mPhons$phoneme == last, "outFemale"]
newOutMale <- ifelse(gen %in% c("u", "m"),  currentOutMale + 1, currentOutMale)
newOutFemale <- ifelse(gen %in% c("u", "f"), currentOutfemale + 1, currentOutfemale)
mPhons[mPhons$phoneme == last, c("outMale", "outFemale")] <- c(newOutMale, newOutFemale)
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gen
gName$like <- as.logical(NA)
# commit the ratings updates
commitPhons(mPhons)
return(gName)
}
saveName <- function(sN) {
if (is.na(sN$like)) sN$like <- FALSE
if (sN$like) {
mPhons <- getMasterPhonemes()
currentLikedFirst <- mPhons[mPhons$phoneme == tolower(sN$phonList[1]), "likedFirst"]
mPhons[mPhons$phoneme == tolower(sN$phonList[1]), "likedFirst"] <- currentLikedFirst + 1
currentLikedMale <- mPhons[mPhons$phoneme == tolower(sN$phonList[sN$phonLength]), "likedMale"]
currentLikedfemale <- mPhons[mPhons$phoneme == tolower(sN$phonList[sN$phonLength]), "likedFemale"]
newLikedMale <- ifelse(sN$gender %in% c("u", "m"), currentLikedMale + 1, currentLikedMale)
newLikedFemale <- ifelse(sN$gender %in% c("u", "f"), currentLikedfemale + 1, currentLikedfemale)
mPhons[mPhons$phoneme == sN$phonList[sN$phonLength], c("likedMale", "likedFemale")] <- c(newLikedMale, newLikedFemale)
if (sN$phonLength > 2) {
for (mid in sN$phonList[-c(1, sN$phonLength)]) {
currentLikedMid <- mPhons[mPhons$phoneme == mid, "likedMid"]
mPhons[mPhons$phoneme == mid, "likedMid"] <- currentLikedMid + 1
}
}
commitPhons(mPhons)
}
}
ghetInit()
ghetInit <- function() {
source("environmentControls.R")
source("commonValidations.R")
source("commonActions.R")
source("generateName.R")
assign("GhetNameEnv", new.env(), envir=.GlobalEnv)
if (is.null(get0("MasterPhonemes", envir=GhetNameEnv))) {
if (!(file.exists("MasterPhonemes.txt"))) {
stop("Missing Master Phonemes File")
}
assign("MasterPhonemes", envir = GhetNameEnv
, read.csv("MasterPhonemes.csv"
, header = TRUE
, stringsAsFactors = FALSE))
}
}
ghetClose <- function() {
# NB Right now concurrency = 1
if (nrow(GhetNameEnv$MasterPhonemes) > 0) {
write.csv(GhetNameEnv$MasterPhonemes, "MasterPhonemes.", row.names = FALSE)
}
rm(GhetNameEnv, envir = .GlobalEnv)
# TO DO - keep all the functions in the environment and get rid of everything on exit
}
ghetInit()
ghetInit <- function() {
source("environmentControls.R")
source("commonValidations.R")
source("commonActions.R")
source("generateName.R")
assign("GhetNameEnv", new.env(), envir=.GlobalEnv)
if (is.null(get0("MasterPhonemes", envir=GhetNameEnv))) {
if (!(file.exists("MasterPhonemes.csv"))) {
stop("Missing Master Phonemes File")
}
assign("MasterPhonemes", envir = GhetNameEnv
, read.csv("MasterPhonemes.csv"
, header = TRUE
, stringsAsFactors = FALSE))
}
}
ghetClose <- function() {
# NB Right now concurrency = 1
if (nrow(GhetNameEnv$MasterPhonemes) > 0) {
write.csv(GhetNameEnv$MasterPhonemes, "MasterPhonemes.csv", row.names = FALSE)
}
rm(GhetNameEnv, envir = .GlobalEnv)
# TO DO - keep all the functions in the environment and get rid of everything on exit
}
ghetInit()
p <- GhetNameEnv$MasterPhonemes
View(p)
makePhoneme("ssius", FALSE, TRUE, "m")
p <- GhetNameEnv$MasterPhonemes
makePhoneme("shus", FALSE, TRUE, "m")
makePhoneme("shuss", FALSE, TRUE, "m")
makePhoneme("scius", FALSE, TRUE, "m")
makePhoneme("cius", FALSE, TRUE, "m")
makePhoneme("scious", FALSE, TRUE, "m")
makePhoneme("cious", FALSE, TRUE, "m")
generateName("m")
generateName(2, "m")
generateName(2, "m")
ghetClose()
rm(list=ls())
ghetInit <- function() {
source("environmentControls.R")
source("commonValidations.R")
source("commonActions.R")
source("generateName.R")
assign("GhetNameEnv", new.env(), envir=.GlobalEnv)
if (is.null(get0("MasterPhonemes", envir=GhetNameEnv))) {
if (!(file.exists("MasterPhonemes.csv"))) {
stop("Missing Master Phonemes File")
}
assign("MasterPhonemes", envir = GhetNameEnv
, read.csv("MasterPhonemes.csv"
, header = TRUE
, stringsAsFactors = FALSE))
}
}
ghetClose <- function() {
# NB Right now concurrency = 1
if (nrow(GhetNameEnv$MasterPhonemes) > 0) {
write.csv(GhetNameEnv$MasterPhonemes, "MasterPhonemes.csv", row.names = FALSE)
}
rm(GhetNameEnv, envir = .GlobalEnv)
# TO DO - keep all the functions in the environment and get rid of everything on exit
}
ghetInit()
p <- GhetNameEnv$MasterPhonemes
View(p)
generateName(2, "m")
generateName(2, "m")
generateName(2, "m")
generateName(2, "m")
generateName(3, "f")
generateName(3, "f")
generateName(3, "f")
generateName(3, "f")
generateName(3, "f")
p[grepl("'", p$phoneme), "phoneme"]
p[grepl("'", p$phoneme), "canBeMid"] <- FALSE
commitPhons(p)
generateName(3, "f")
generateName(3, "f")
generateName(3, "f")
generateName(3, "f")
generateName(3, "f")
updatePhoneme("berg", FALSE, FALSE, "m")
mPhons <- getMasterPhonemes()
updatePhoneme <- function(phon, fst, mid, gen) {
# common validation
mPhons <- getMasterPhonemes()
checkFirstAndMid(fst, mid)
checkGenderAssignment(gen)
#process steps
gender <- genderAssignment(gen)
mPhons[mPhons$phoneme == phon, c("canBeFirst", "canBeMid", "maleEnding", "femaleEnding")] <- c(fst, mid, gender["m"], gender["f"])
commitPhons(mPhons)
print(paste("Updated phoneme ", phon, " to Master Phonemes File"))
}
updatePhoneme("berg", FALSE, FALSE, "m")
p <- GhetNameEnv$MasterPhonemes
View(p)
generateName(3, "f")
generateName(3, "f")
generateName(3, "f")
generateName(3, "f")
p[grepl("mt", p$phoneme), "canBeFirst"] <- FALSE
commitPhons(p)
updatePhoneme("mté", TRUE, TRUE, "u")
generateName(3, "f")
generateName(3, "f")
generateName(3, "f")
generateName(3, "f")
generateName(3, "f")
generateName(3, "f")
generateName(3, "f")
generateName(3, "f")
generateName(3, "m")
generateName(3, "m")
generateName(3, "m")
generateName(3, "m")
generateName(3, "m")
ghetClose()
rm(list = ls())
