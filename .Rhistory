if (gen == "u") lastPhons <- mPhons[mPhons$maleEnding | mPhons$femaleEnding, "phoneme"]
if (gen == "m") lastPhons <- mPhons[mPhons$maleEnding, "phoneme"]
if (gen == "f") lastPhons <- mPhons[mPhons$femaleEnding, "phoneme"]
first <- sample(firstPhons, 1)
mPhons[mPhons$phoneme == first$phoneme, "outFirst"] <- first$outFirst + 1
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
mPhons[mPhons$phoneme == last$phoneme, "outLast"] <- last$outLast + 1
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gen
gName$like <- as.logical(NA)
# commit the ratings updates
commitPhons(mPhons)
return(gName)
}
generateName(4)
print.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is:", gN$name
,"\n\nThis is a", gen, "name")
invisible(output)
}
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
return(gN)
}
generateName <- function(phonLength, gen = "u", randomness = 1) {
checkGenderAssignment(gen)
gender <- genderAssignment(gen)
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
if (gen == "u") lastPhons <- mPhons[mPhons$maleEnding | mPhons$femaleEnding, "phoneme"]
if (gen == "m") lastPhons <- mPhons[mPhons$maleEnding, "phoneme"]
if (gen == "f") lastPhons <- mPhons[mPhons$femaleEnding, "phoneme"]
first <- sample(firstPhons, 1)
mPhons[mPhons$phoneme == first, "outFirst"] <- first$outFirst + 1
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
mPhons[mPhons$phoneme == last, "outLast"] <- last$outLast + 1
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gen
gName$like <- as.logical(NA)
# commit the ratings updates
commitPhons(mPhons)
return(gName)
}
generateName(4)
print.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is:", gN$name
,"\n\nThis is a", gen, "name")
invisible(output)
}
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
return(gN)
}
generateName <- function(phonLength, gen = "u", randomness = 1) {
checkGenderAssignment(gen)
gender <- genderAssignment(gen)
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, c("phoneme", "outFirst")]
if (gen == "u") lastPhons <- mPhons[mPhons$maleEnding | mPhons$femaleEnding, c("phoneme", "outMale", "outFemale")]
if (gen == "m") lastPhons <- mPhons[mPhons$maleEnding, c("phoneme", "outMale", I(0))]
if (gen == "f") lastPhons <- mPhons[mPhons$femaleEnding, c("phoneme", I(0), "outFemale")]
first <- sample(firstPhons, 1)
mPhons[mPhons$phoneme == first$phoneme, "outFirst"] <- first$outFirst + 1
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
mPhons[mPhons$phoneme == last$phoneme, c("outMale", "outFemale")] <- last[,2:3]
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gen
gName$like <- as.logical(NA)
# commit the ratings updates
commitPhons(mPhons)
return(gName)
}
generateName(4)
generateName(4)
first
first$phoneme
phonLength <- 4
checkGenderAssignment(gen)
gender <- genderAssignment(gen)
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, c("phoneme", "outFirst")]
if (gen == "u") lastPhons <- mPhons[mPhons$maleEnding | mPhons$femaleEnding, c("phoneme", "outMale", "outFemale")]
if (gen == "m") lastPhons <- mPhons[mPhons$maleEnding, c("phoneme", "outMale", I(0))]
if (gen == "f") lastPhons <- mPhons[mPhons$femaleEnding, c("phoneme", I(0), "outFemale")]
first <- sample(firstPhons, 1)
str(firstPhons)
first <- sample(firstPhons, 1)
firststr())
str(first)
first <- sample(firstPhons$phoneme, 1)
first <- sample(firstPhons$phoneme, 1)
mPhons[mPhons$phoneme == first$phoneme, "outFirst"] <- first$outFirst + 1
mPhons[mPhons$phoneme == first, "outFirst"] <- first$outFirst + 1
first <- sample(firstPhons, 1)
first <- sample(firstPhons[,], 1)
first <- sample(firstPhons, 1)
first <- sample(firstPhons$phoneme, 1)
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
first <- sample(firstPhons, 1)
first <- sample(firstPhons, 1)
currentOutFirst <- mPhons[mPhons$phoneme == first, "outFirst"]
mPhons[mPhons$phoneme == first, "outFirst"] <- currentOutFirst + 1
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
last <- sample(lastPhons, 1)
if (gen == "u") lastPhons <- mPhons[mPhons$maleEnding | mPhons$femaleEnding, "phoneme"]
if (gen == "m") lastPhons <- mPhons[mPhons$maleEnding, "phoneme"]
if (gen == "f") lastPhons <- mPhons[mPhons$femaleEnding, "phoneme"]
if (gen == "u") lastPhons <- mPhons[mPhons$maleEnding | mPhons$femaleEnding, "phoneme"]
if (gen == "m") lastPhons <- mPhons[mPhons$maleEnding, "phoneme"]
if (gen == "f") lastPhons <- mPhons[mPhons$femaleEnding, "phoneme"]
last <- sample(lastPhons, 1)
last <- sample(lastPhons, 1)
currentOutMale <- mPhons[mPhons$phoneme == last, "outMale"]
currentOutfemale <- mPhons[mPhons$phoneme == last, "outfemale"]
currentOutfemale <- mPhons[mPhons$phoneme == last, "outFemale"]
if (gen %>% c("u", "m")) newOutMale <- currentOutMale + 1
if (gen %in% c("u", "m")) newOutMale <- currentOutMale + 1
if (gen %in% c("u", "f")) newOutFemale <- currentOutfemale + 1
mPhons[mPhons$phoneme == last$phoneme, c("outMale", "outFemale")] <- c(newOutMale, newOutFemale)
mPhons[mPhons$phoneme == last, c("outMale", "outFemale")] <- c(newOutMale, newOutFemale)
mPhons[mPhons$phoneme == "pru"]
mPhons[mPhons$phoneme == "pru",]
print.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is:", gN$name
,"\n\nThis is a", gen, "name")
invisible(output)
}
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
return(gN)
}
generateName <- function(phonLength, gen = "u", randomness = 1) {
checkGenderAssignment(gen)
gender <- genderAssignment(gen)
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
if (gen == "u") lastPhons <- mPhons[mPhons$maleEnding | mPhons$femaleEnding, "phoneme"]
if (gen == "m") lastPhons <- mPhons[mPhons$maleEnding, "phoneme"]
if (gen == "f") lastPhons <- mPhons[mPhons$femaleEnding, "phoneme"]
first <- sample(firstPhons, 1)
currentOutFirst <- mPhons[mPhons$phoneme == first, "outFirst"]
mPhons[mPhons$phoneme == first, "outFirst"] <- currentOutFirst + 1
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
currentOutMid <- mPhons[mPhons$phoneme == first, "outMid"]
mPhons[mPhons$phoneme == mid, "outMid"] <- currentOutMid + 1
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
currentOutMale <- mPhons[mPhons$phoneme == last, "outMale"]
currentOutfemale <- mPhons[mPhons$phoneme == last, "outFemale"]
if (gen %in% c("u", "m")) newOutMale <- currentOutMale + 1
if (gen %in% c("u", "f")) newOutFemale <- currentOutfemale + 1
mPhons[mPhons$phoneme == last, c("outMale", "outFemale")] <- c(newOutMale, newOutFemale)
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gen
gName$like <- as.logical(NA)
# commit the ratings updates
commitPhons(mPhons)
return(gName)
}
saveName <- function(sN) {
fstPhon <- sN$phonList[1]
lstPhon <- sN$phonList[sN$phonLength]
midPhons <- if (sN$phonLength > 2) sN$phonList[-c(1, sN$phonLength)]
list(fst = fstPhon, mids = midPhons, lst = lstPhon)
}
generateName(4, "f")
mid <- sample(mPhons$phoneme, 1)
currentOutMid <- mPhons[mPhons$phoneme == first, "outMid"]
mPhons[mPhons$phoneme == mid, "outMid"] <- currentOutMid + 1
currentOutMid <- mPhons[mPhons$phoneme == first, "outMid"]
currentOutMid <- mPhons[mPhons$phoneme == mid, "outMid"]
mPhons[mPhons$phoneme == mid, "outMid"] <- currentOutMid + 1
mids <- paste0(mids, mid)
mPhons[mPhons$phoneme == "dy",]
print.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is:", gN$name
,"\n\nThis is a", gen, "name")
invisible(output)
}
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
return(gN)
}
generateName <- function(phonLength, gen = "u", randomness = 1) {
checkGenderAssignment(gen)
gender <- genderAssignment(gen)
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
if (gen == "u") lastPhons <- mPhons[mPhons$maleEnding | mPhons$femaleEnding, "phoneme"]
if (gen == "m") lastPhons <- mPhons[mPhons$maleEnding, "phoneme"]
if (gen == "f") lastPhons <- mPhons[mPhons$femaleEnding, "phoneme"]
first <- sample(firstPhons, 1)
currentOutFirst <- mPhons[mPhons$phoneme == first, "outFirst"]
mPhons[mPhons$phoneme == first, "outFirst"] <- currentOutFirst + 1
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
currentOutMid <- mPhons[mPhons$phoneme == mid, "outMid"]
mPhons[mPhons$phoneme == mid, "outMid"] <- currentOutMid + 1
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
currentOutMale <- mPhons[mPhons$phoneme == last, "outMale"]
currentOutfemale <- mPhons[mPhons$phoneme == last, "outFemale"]
if (gen %in% c("u", "m")) newOutMale <- currentOutMale + 1
if (gen %in% c("u", "f")) newOutFemale <- currentOutfemale + 1
mPhons[mPhons$phoneme == last, c("outMale", "outFemale")] <- c(newOutMale, newOutFemale)
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gen
gName$like <- as.logical(NA)
# commit the ratings updates
commitPhons(mPhons)
return(gName)
}
saveName <- function(sN) {
fstPhon <- sN$phonList[1]
lstPhon <- sN$phonList[sN$phonLength]
midPhons <- if (sN$phonLength > 2) sN$phonList[-c(1, sN$phonLength)]
list(fst = fstPhon, mids = midPhons, lst = lstPhon)
}
generateName(4, "f")
ghetClose()
print.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is:", gN$name
,"\n\nThis is a", gen, "name")
invisible(output)
}
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
return(gN)
}
generateName <- function(phonLength, gen = "u", randomness = 1) {
checkGenderAssignment(gen)
gender <- genderAssignment(gen)
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
if (gen == "u") lastPhons <- mPhons[mPhons$maleEnding | mPhons$femaleEnding, "phoneme"]
if (gen == "m") lastPhons <- mPhons[mPhons$maleEnding, "phoneme"]
if (gen == "f") lastPhons <- mPhons[mPhons$femaleEnding, "phoneme"]
first <- sample(firstPhons, 1)
currentOutFirst <- mPhons[mPhons$phoneme == first, "outFirst"]
mPhons[mPhons$phoneme == first, "outFirst"] <- currentOutFirst + 1
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
currentOutMid <- mPhons[mPhons$phoneme == mid, "outMid"]
mPhons[mPhons$phoneme == mid, "outMid"] <- currentOutMid + 1
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
currentOutMale <- mPhons[mPhons$phoneme == last, "outMale"]
currentOutfemale <- mPhons[mPhons$phoneme == last, "outFemale"]
if (gen %in% c("u", "m")) newOutMale <- currentOutMale + 1
if (gen %in% c("u", "f")) newOutFemale <- currentOutfemale + 1
mPhons[mPhons$phoneme == last, c("outMale", "outFemale")] <- c(newOutMale, newOutFemale)
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gen
gName$like <- as.logical(NA)
# commit the ratings updates
commitPhons(mPhons)
return(gName)
}
saveName <- function(sN) {
if (sN$like) {}
mPhons <- getMasterPhonemes()
currentLikedFirst <- mPhons[mPhons$phoneme == sN$phonList[1], "likedFirst"]
mPhons[mPhons$phoneme == sN$phonList[1], "likedFirst"] <- currentLikedFirst + 1
currentLikedMale <- mPhons[mPhons$phoneme == sN$phonList[sN$phonLength], "likedMale"]
currentLikedfemale <- mPhons[mPhons$phoneme == sN$phonList[sN$phonLength], "likedFemale"]
if (gen %in% c("u", "m")) newLikedMale <- currentLikedMale + 1
if (gen %in% c("u", "f")) newLikedFemale <- currentLikedfemale + 1
mPhons[mPhons$phoneme == sN$phonList[sN$phonLength], c("likedMale", "likedFemale")] <- c(newLikedMale, newLikedFemale)
if (sN$phonLength > 2)
for (mid in sN$phonList[-c(1, sN$phonLength)]) {
currentLikedMid <- mPhons[mPhons$phoneme == mid, "likedMid"]
mPhons[mPhons$phoneme == mid, "likedMid"] <- currentLikedMid + 1
}
}
n
n$like
saveName(n)
ghetInit()
saveName(n)
ghetInit()
saveName(n)
saveName(n)
mPhons <- getMasterPhonemes()
mPhons[mPhons$phoneme == "ha"]
mPhons[mPhons$phoneme == "ha",]
saveName <- function(sN) {
if (sN$like) {}
mPhons <- getMasterPhonemes()
currentLikedFirst <- mPhons[mPhons$phoneme == sN$phonList[1], "likedFirst"]
mPhons[mPhons$phoneme == sN$phonList[1], "likedFirst"] <- currentLikedFirst + 1
currentLikedMale <- mPhons[mPhons$phoneme == sN$phonList[sN$phonLength], "likedMale"]
currentLikedfemale <- mPhons[mPhons$phoneme == sN$phonList[sN$phonLength], "likedFemale"]
if (gen %in% c("u", "m")) newLikedMale <- currentLikedMale + 1
if (gen %in% c("u", "f")) newLikedFemale <- currentLikedfemale + 1
mPhons[mPhons$phoneme == sN$phonList[sN$phonLength], c("likedMale", "likedFemale")] <- c(newLikedMale, newLikedFemale)
if (sN$phonLength > 2)
for (mid in sN$phonList[-c(1, sN$phonLength)]) {
currentLikedMid <- mPhons[mPhons$phoneme == mid, "likedMid"]
mPhons[mPhons$phoneme == mid, "likedMid"] <- currentLikedMid + 1
}
commitPhons(mPhons)
}
saveName(n)
mPhons[mPhons$phoneme == "an",]
sN <- n
saveName <- function(sN) {
if (sN$like) {
mPhons <- getMasterPhonemes()
currentLikedFirst <- mPhons[mPhons$phoneme == sN$phonList[1], "likedFirst"]
mPhons[mPhons$phoneme == sN$phonList[1], "likedFirst"] <- currentLikedFirst + 1
currentLikedMale <- mPhons[mPhons$phoneme == sN$phonList[sN$phonLength], "likedMale"]
currentLikedfemale <- mPhons[mPhons$phoneme == sN$phonList[sN$phonLength], "likedFemale"]
if (gen %in% c("u", "m")) newLikedMale <- currentLikedMale + 1
if (gen %in% c("u", "f")) newLikedFemale <- currentLikedfemale + 1
mPhons[mPhons$phoneme == sN$phonList[sN$phonLength], c("likedMale", "likedFemale")] <- c(newLikedMale, newLikedFemale)
if (sN$phonLength > 2)
for (mid in sN$phonList[-c(1, sN$phonLength)]) {
currentLikedMid <- mPhons[mPhons$phoneme == mid, "likedMid"]
mPhons[mPhons$phoneme == mid, "likedMid"] <- currentLikedMid + 1
}
commitPhons(mPhons)
}
}
saveName(n)
mPhons[mPhons$phoneme == "an",]
sN <- n
if (sN$like) {
mPhons <- getMasterPhonemes()
currentLikedFirst <- mPhons[mPhons$phoneme == sN$phonList[1], "likedFirst"]
currentLikedFirst <- mPhons[mPhons$phoneme == sN$phonList[1], "likedFirst"]
View(mPhons)
sN$phonList[1]
currentLikedFirst <- mPhons[mPhons$phoneme == tolower(sN$phonList[1]), "likedFirst"]
mPhons[mPhons$phoneme == tolower(sN$phonList[1]), "likedFirst"] <- currentLikedFirst + 1
currentLikedMale <- mPhons[mPhons$phoneme == tolower(sN$phonList[sN$phonLength]), "likedMale"]
currentLikedfemale <- mPhons[mPhons$phoneme == tolower(sN$phonList[sN$phonLength]), "likedFemale"]
if (gen %in% c("u", "m")) newLikedMale <- currentLikedMale + 1
if (gen %in% c("u", "f")) newLikedFemale <- currentLikedfemale + 1
mPhons[mPhons$phoneme == sN$phonList[sN$phonLength], c("likedMale", "likedFemale")] <- c(newLikedMale, newLikedFemale)
if (sN$phonLength > 2)
for (mid in sN$phonList[-c(1, sN$phonLength)]) {
currentLikedMid <- mPhons[mPhons$phoneme == mid, "likedMid"]
mPhons[mPhons$phoneme == mid, "likedMid"] <- currentLikedMid + 1
}
sN$phonLength
if (sN$phonLength > 2)
if (sN$phonLength > 2) {
sN$phonLength > 2
saveName <- function(sN) {
if (sN$like) {
mPhons <- getMasterPhonemes()
currentLikedFirst <- mPhons[mPhons$phoneme == tolower(sN$phonList[1]), "likedFirst"]
mPhons[mPhons$phoneme == tolower(sN$phonList[1]), "likedFirst"] <- currentLikedFirst + 1
currentLikedMale <- mPhons[mPhons$phoneme == tolower(sN$phonList[sN$phonLength]), "likedMale"]
currentLikedfemale <- mPhons[mPhons$phoneme == tolower(sN$phonList[sN$phonLength]), "likedFemale"]
if (gen %in% c("u", "m")) newLikedMale <- currentLikedMale + 1
if (gen %in% c("u", "f")) newLikedFemale <- currentLikedfemale + 1
mPhons[mPhons$phoneme == sN$phonList[sN$phonLength], c("likedMale", "likedFemale")] <- c(newLikedMale, newLikedFemale)
if sN$phonLength > 2 {
for (mid in sN$phonList[-c(1, sN$phonLength)]) {
currentLikedMid <- mPhons[mPhons$phoneme == mid, "likedMid"]
mPhons[mPhons$phoneme == mid, "likedMid"] <- currentLikedMid + 1
}
}
commitPhons(mPhons)
saveName <- function(sN) {
if (sN$like) {
mPhons <- getMasterPhonemes()
currentLikedFirst <- mPhons[mPhons$phoneme == tolower(sN$phonList[1]), "likedFirst"]
mPhons[mPhons$phoneme == tolower(sN$phonList[1]), "likedFirst"] <- currentLikedFirst + 1
currentLikedMale <- mPhons[mPhons$phoneme == tolower(sN$phonList[sN$phonLength]), "likedMale"]
currentLikedfemale <- mPhons[mPhons$phoneme == tolower(sN$phonList[sN$phonLength]), "likedFemale"]
if (gen %in% c("u", "m")) newLikedMale <- currentLikedMale + 1
if (gen %in% c("u", "f")) newLikedFemale <- currentLikedfemale + 1
mPhons[mPhons$phoneme == sN$phonList[sN$phonLength], c("likedMale", "likedFemale")] <- c(newLikedMale, newLikedFemale)
if (sN$phonLength > 2) {
for (mid in sN$phonList[-c(1, sN$phonLength)]) {
currentLikedMid <- mPhons[mPhons$phoneme == mid, "likedMid"]
mPhons[mPhons$phoneme == mid, "likedMid"] <- currentLikedMid + 1
}
}
commitPhons(mPhons)
}
}
if (sN$phonLength > 2) {
for (mid in sN$phonList[-c(1, sN$phonLength)]) {
currentLikedMid <- mPhons[mPhons$phoneme == mid, "likedMid"]
mPhons[mPhons$phoneme == mid, "likedMid"] <- currentLikedMid + 1
}
}
commitPhons(mPhons)
}
}
saveName(n)
mPhons <- getMasterPhonemes()
mPhons[mPhons$phoneme == "an",]
rm(list = ls())
