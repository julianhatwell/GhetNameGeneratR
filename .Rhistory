if (!(is.data.frame(phonDF)) |
(!(ncol(phonDF == 3)))) {
stop("You must provide a three column data frame")
}
mPhons <- checkExistsMaster()
checkFirstAndLast(phonDF[[2]], phonDF[[3]])
sapply(as.character(phonDF$phoneme), checkExistsPhoneme, mPhons$phoneme)
newPhons <- rbind(mPhons, phonDF)
commitPhons(newPhons)
print("Added multiple phonemes to Master Phonemes File")
}
generateName(4)
generateName(4)
makePhoneme("sius", TRUE, TRUE)
generateName(4)
generateName(2)
generateName(2)
generateName(2)
generateName(2)
generateName(3)
makePhoneme("un", TRUE, TRUE)
makePhoneme("on", TRUE, TRUE)
makePhoneme("berg", TRUE, TRUE)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
makePhoneme("sway", TRUE, TRUE)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(2)
generateName(2)
generateName(2)
generateName(2)
generateName(2)
generateName(2)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
generateName(3)
new.env("TestEnv", parent = .GlobalEnv)
assign("TestEnv", new.env(), envir=.GlobalEnv)
is.environment("TestEnv")
is.environment(TestEnv)
TestEnv <- NULL
assign("GhetNameEnv", new.env(), envir=.GlobalEnv)
if (is.null(get("MasterPhonemes", envir=GhetNameEnv))) {
assign("MasterPhonemes"
, read.csv("MasterPhonemes.txt"
, header = TRUE
, stringsAsFactors = FALSE))
}
if (is.null(get0("MasterPhonemes", envir=GhetNameEnv))) {
assign("MasterPhonemes"
, read.csv("MasterPhonemes.txt"
, header = TRUE
, stringsAsFactors = FALSE))
}
if (is.null(get0("MasterPhonemes", envir=GhetNameEnv))) {
assign("MasterPhonemes"
, read.csv("MasterPhonemes.txt"
, header = TRUE
, stringsAsFactors = FALSE))
}
source("environmentControls.R")
source("commonValidations.R")
source("commonActions.R")
source("generateName.R")
source("environmentControls.R")
ghetInit()
source("environmentControls.R")
source("commonValidations.R")
source("commonActions.R")
source("generateName.R")
ghetClose()
makePhoneme("shonne", TRUE, TRUE)
ghetClose()
View(MasterPhonemes)
str(MasterPhonemes)
get0(MasterPhonemes,envir = GhetNameEnv)
get0("MasterPhonemes",envir = GhetNameEnv)
commitPhons <- function(phonDF) {
get0("MasterPhonemes",envir = GhetNameEnv) <- phonDF[order(phonDF$phoneme),]
}
source("environmentControls.R")
source("commonValidations.R")
source("commonActions.R")
source("generateName.R")
makePhoneme("shonne", TRUE, TRUE)
ghetClose()
rm(list = ls(ghetEnv))
rm(list = ls(envir = ghetEnv))
rm(list=ls())
ghetInit <- function() {
assign("GhetNameEnv", new.env(), envir=.GlobalEnv)
if (is.null(get0("MasterPhonemes", envir=GhetNameEnv))) {
if (!(file.exists("MasterPhonemes.txt"))) {
stop("Missing Master Phonemes File")
}
assign("MasterPhonemes"
, read.csv("MasterPhonemes.txt"
, header = TRUE
, stringsAsFactors = FALSE))
# TO DO - get performance/probablities
}
}
ghetClose <- function() {
# NB Right now concurrency = 1
write.csv(MasterPhonemes, "MasterPhonemes.txt", row.names = FALSE)
}
ghetInit()
source("environmentControls.R")
source("commonValidations.R")
source("commonActions.R")
source("generateName.R")
generateName(2)
ghetInit <- function() {
assign("GhetNameEnv", new.env(), envir=.GlobalEnv)
if (is.null(get0("MasterPhonemes", envir=GhetNameEnv))) {
if (!(file.exists("MasterPhonemes.txt"))) {
stop("Missing Master Phonemes File")
}
assign("MasterPhonemes", envir = GhetNameEnv
, read.csv("MasterPhonemes.txt"
, header = TRUE
, stringsAsFactors = FALSE))
# TO DO - get performance/probablities
}
}
ghetClose <- function() {
# NB Right now concurrency = 1
write.csv(MasterPhonemes, "MasterPhonemes.txt", row.names = FALSE)
}
ghetInit()
rm(GhetNameEnv)
ghetInit()
if (is.null(get0("MasterPhonemes", envir=GhetNameEnv))) {
if (!(file.exists("MasterPhonemes.txt"))) {
stop("Missing Master Phonemes File")
}
assign("MasterPhonemes"
, read.csv("MasterPhonemes.txt"
, header = TRUE
, stringsAsFactors = FALSE))
}
get0("MasterPhonemes", envir=GhetNameEnv)
MasterPhonemes
getMasterPhonemes <- function() GhetNameEnv$MasterPhonemes
getMasterPhonemes()
getMasterPhonemes <- function() GhetNameEnv$MasterPhonemes
commitPhons <- function(phonDF) {
MasterPhonemes <<- phonDF[order(phonDF$phoneme),]
}
makePhoneme <- function(phon, fst, lst) {
# common validation
mPhons <- getMasterPhonemes()
checkFirstAndLast(fst, lst)
checkExistsPhoneme(phon, mPhons$phoneme)
newPhons <- rbind(mPhons, c(tolower(phon), fst, lst))
commitPhons(newPhons)
print(paste("Added phoneme ", phon, " to Master Phonemes File"))
}
updatePhoneme <- function(phon, fst, lst) {
# common validation
mPhons <- getMasterPhonemes()
checkFirstAndLast(fst, lst)
phon <- tolower(phon)
newPhons <- rbind(mPhons[mPhons$phoneme != phon,], c(phon, fst, lst))
commitPhons(newPhons)
print(paste("Updated phoneme ", phon, " to Master Phonemes File"))
}
deletePhoneme <- function(phon) {
# common validation
mPhons <- getMasterPhonemes()
newPhons <- mPhons[mPhons$phoneme != tolower(phon),]
commitPhons(newPhons)
print(paste("Removed phoneme ", phon, " from Master Phonemes File"))
}
deletePhonemes <- function(phons) sapply(phons, deletePhoneme)
permutePhoneme <- function(stem) {
adjuncts <- c("'", "a", "e", "i", "o", "u", "y")
phoneme <- character(0)
for (adj in adjuncts) {
phoneme <- c(phoneme, paste0(stem, adj))
}
canBeFirst <- rep(TRUE, times = length(adjuncts))
canBeLast <- c(FALSE, rep(TRUE, times = length(adjuncts) - 1))
data.frame(phoneme, canBeFirst, canBeLast)
}
addPhonemes <- function(phonDF) {
if (!(is.data.frame(phonDF)) |
(!(ncol(phonDF == 3)))) {
stop("You must provide a three column data frame")
}
mPhons <- getMasterPhonemes()
checkFirstAndLast(phonDF[[2]], phonDF[[3]])
sapply(as.character(phonDF$phoneme), checkExistsPhoneme, mPhons$phoneme)
newPhons <- rbind(mPhons, phonDF)
commitPhons(newPhons)
print("Added multiple phonemes to Master Phonemes File")
}
getMasterPhonemes <- function() GhetNameEnv$MasterPhonemes
commitPhons <- function(phonDF) {
MasterPhonemes <<- phonDF[order(phonDF$phoneme),]
}
makePhoneme <- function(phon, fst, lst) {
# common validation
mPhons <- getMasterPhonemes()
checkFirstAndLast(fst, lst)
checkExistsPhoneme(phon, mPhons$phoneme)
newPhons <- rbind(mPhons, c(tolower(phon), fst, lst))
commitPhons(newPhons)
print(paste("Added phoneme ", phon, " to Master Phonemes File"))
}
updatePhoneme <- function(phon, fst, lst) {
# common validation
mPhons <- getMasterPhonemes()
checkFirstAndLast(fst, lst)
phon <- tolower(phon)
newPhons <- rbind(mPhons[mPhons$phoneme != phon,], c(phon, fst, lst))
commitPhons(newPhons)
print(paste("Updated phoneme ", phon, " to Master Phonemes File"))
}
deletePhoneme <- function(phon) {
# common validation
mPhons <- getMasterPhonemes()
newPhons <- mPhons[mPhons$phoneme != tolower(phon),]
commitPhons(newPhons)
print(paste("Removed phoneme ", phon, " from Master Phonemes File"))
}
deletePhonemes <- function(phons) sapply(phons, deletePhoneme)
permutePhoneme <- function(stem) {
adjuncts <- c("'", "a", "e", "i", "o", "u", "y")
phoneme <- character(0)
for (adj in adjuncts) {
phoneme <- c(phoneme, paste0(stem, adj))
}
canBeFirst <- rep(TRUE, times = length(adjuncts))
canBeLast <- c(FALSE, rep(TRUE, times = length(adjuncts) - 1))
data.frame(phoneme, canBeFirst, canBeLast)
}
addPhonemes <- function(phonDF) {
if (!(is.data.frame(phonDF)) |
(!(ncol(phonDF == 3)))) {
stop("You must provide a three column data frame")
}
mPhons <- getMasterPhonemes()
checkFirstAndLast(phonDF[[2]], phonDF[[3]])
sapply(as.character(phonDF$phoneme), checkExistsPhoneme, mPhons$phoneme)
newPhons <- rbind(mPhons, phonDF)
commitPhons(newPhons)
print("Added multiple phonemes to Master Phonemes File")
}
generateName <- function(numPhons, gender = "u", randomness = 1) {
numPhons <- ifelse(numPhons < 2, 2, numPhons - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
lastPhons <- mPhons[mPhons$canBeLast == TRUE, "phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList[[i + 1]] <- mid
}
}
last <- sample(lastPhons, 1)
gName <- list()
gName$name <- paste0(first, mids, last)
gName$phonLength <- numPhons
gName$phonList <- c(first, phonList, last)
gName$Gender <- gender
gName$Like <- logical(1)
class(gName) <- ghetName
}
generateName(3)
generateName <- function(numPhons, gender = "u", randomness = 1) {
numPhons <- ifelse(numPhons < 2, 2, numPhons - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
lastPhons <- mPhons[mPhons$canBeLast == TRUE, "phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- list()
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList[[i + 1]] <- mid
}
}
last <- sample(lastPhons, 1)
gName <- list()
gName$name <- paste0(first, mids, last)
gName$phonLength <- numPhons
gName$phonList <- c(first, phonList, last)
gName$Gender <- gender
gName$Like <- logical(1)
class(gName) <- ghetName
}
generateName(3)
generateName <- function(numPhons, gender = "u", randomness = 1) {
numPhons <- ifelse(numPhons < 2, 2, numPhons - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
lastPhons <- mPhons[mPhons$canBeLast == TRUE, "phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- list()
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList[[i + 1]] <- mid
}
}
last <- sample(lastPhons, 1)
gName <- list()
gName$name <- paste0(first, mids, last)
gName$phonLength <- numPhons
gName$phonList <- c(first, phonList, last)
gName$Gender <- gender
gName$Like <- logical(1)
class(gName) <- "ghetName"
}
generateName(3)
generateName <- function(numPhons, gender = "u", randomness = 1) {
numPhons <- ifelse(numPhons < 2, 2, numPhons - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
lastPhons <- mPhons[mPhons$canBeLast == TRUE, "phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- list()
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList[[i + 1]] <- mid
}
}
last <- sample(lastPhons, 1)
gName <- list()
gName$name <- paste0(first, mids, last)
gName$phonLength <- numPhons
gName$phonList <- c(first, phonList, last)
gName$Gender <- gender
gName$Like <- logical(1)
class(gName) <- "ghetName"
gName
}
generateName(3)
generateName <- function(phonLength, gender = "u", randomness = 1) {
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
lastPhons <- mPhons[mPhons$canBeLast == TRUE, "phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- list()
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList[[i + 1]] <- mid
}
}
last <- sample(lastPhons, 1)
gName <- list()
gName$name <- paste0(first, mids, last)
gName$phonLength <- numPhons
gName$phonList <- c(first, phonList, last)
gName$Gender <- gender
gName$Like <- logical(1)
class(gName) <- "ghetName"
gName
}
generateName(3)
generateName <- function(phonLength, gender = "u", randomness = 1) {
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
lastPhons <- mPhons[mPhons$canBeLast == TRUE, "phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- list()
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList[[i + 1]] <- mid
}
}
last <- sample(lastPhons, 1)
gName <- list()
gName$name <- paste0(first, mids, last)
gName$phonLength <- phonLength
gName$phonList <- c(first, phonList, last)
gName$Gender <- gender
gName$Like <- logical(NA)
class(gName) <- "ghetName"
gName
}
generateName(3)
generateName <- function(phonLength, gender = "u", randomness = 1) {
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
lastPhons <- mPhons[mPhons$canBeLast == TRUE, "phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- list()
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList[[i + 1]] <- mid
}
}
last <- sample(lastPhons, 1)
gName <- list()
gName$name <- paste0(first, mids, last)
gName$phonLength <- phonLength
gName$phonList <- c(first, phonList, last)
gName$Gender <- gender
gName$Like <- as.logical(NA)
class(gName) <- "ghetName"
gName
}
generateName(3)
generateName <- function(phonLength, gender = "u", randomness = 1) {
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
lastPhons <- mPhons[mPhons$canBeLast == TRUE, "phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
gName <- list()
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$Gender <- gender
gName$Like <- as.logical(NA)
class(gName) <- "ghetName"
gName
}
generateName(3)
ghetClose()
ghetInit <- function() {
assign("GhetNameEnv", new.env(), envir=.GlobalEnv)
if (is.null(get0("MasterPhonemes", envir=GhetNameEnv))) {
if (!(file.exists("MasterPhonemes.txt"))) {
stop("Missing Master Phonemes File")
}
assign("MasterPhonemes"
, read.csv("MasterPhonemes.txt"
, header = TRUE
, stringsAsFactors = FALSE))
# TO DO - get performance/probablities
}
}
ghetClose <- function() {
# NB Right now concurrency = 1
write.csv(GhetNameEnv$MasterPhonemes, "MasterPhonemes.txt", row.names = FALSE)
}
ghetClose()
rm(list = ls())
