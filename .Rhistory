source("commonValidations.R")
source("commonActions.R")
source("generateName.R")
assign("GhetNameEnv", new.env(), envir=.GlobalEnv)
if (is.null(get0("MasterPhonemes", envir=GhetNameEnv))) {
if (!(file.exists("MasterPhonemes.txt"))) {
stop("Missing Master Phonemes File")
}
assign("MasterPhonemes", envir = GhetNameEnv
, read.csv("MasterPhonemes.txt"
, header = TRUE
, stringsAsFactors = FALSE))
# TO DO - get performance/probablities
}
}
ghetClose <- function() {
# NB Right now concurrency = 1
if (nrow(GhetNameEnv$MasterPhonemes) > 0) {
write.csv(GhetNameEnv$MasterPhonemes, "MasterPhonemes.txt", row.names = FALSE)
}
rm(GhetNameEnv, envir = .GlobalEnv)
# TO DO - keep all the functions in the environment and get rid of everything on exit
}
ghetInit()
generateName(3)
ghetprint.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is:", gN$name
,"\n\nThis is a", gen, "name")
invisible(output)
}
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
return(gN)
}
generateName <- function(phonLength, gen = "u", randomness = 1) {
checkGenderAssignment(gen)
gender <- genderAssignment(gen)
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
lastPhons <- mPhons[mPhons$canBeLast &
c(mPhons$male, mPhons$female) || c(gender["m"], gender["f"])
, "phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gen
gName$like <- as.logical(NA)
return(gName)
}
generateName(3)
generateName(3, "m")
generateName(3, "f")
mPhons <- getMasterPhonemes()
gender <- genderAssignment("f")
gender
lastPhons <- mPhons[mPhons$canBeLast &
c(mPhons$male, mPhons$female) || c(gender["m"], gender["f"])
, "phoneme"]
mPhons
gender <- genderAssignment("m")
lastPhons <- mPhons[mPhons$canBeLast &
c(mPhons$male, mPhons$female) || c(gender["m"], gender["f"])
, "phoneme"]
c(mPhons$male, mPhons$female) || c(gender["m"], gender["f"])
gender <- genderAssignment("f")
c(mPhons$male, mPhons$female) || c(gender["m"], gender["f"])
lastPhons <- mPhons[mPhons$canBeLast
]
lastPhons <- mPhons[mPhons$canBeLast,]
lastPhons[,c("male", "female")]
lastPhons[,c("male", "female")]
lastPhons[,c("male", "female")] || gender
lastPhons[,c("male", "female")] || c(gender["m"], gender["f"]
)
ghetprint.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is:", gN$name
,"\n\nThis is a", gen, "name")
invisible(output)
}
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
return(gN)
}
generateName <- function(phonLength, gen = "u", randomness = 1) {
checkGenderAssignment(gen)
gender <- genderAssignment(gen)
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
lastPhons <- mPhons[mPhons$canBeLast, "phoneme"]
if (gen == "m") mPhons <- mPhons[mPhons$male, "phoneme"]
if (gen == "f") mPhons <- mPhons[mPhons$female, "phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gen
gName$like <- as.logical(NA)
return(gName)
}
generateName(3, "f")
ghetprint.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is:", gN$name
,"\n\nThis is a", gen, "name")
invisible(output)
}
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
return(gN)
}
generateName <- function(phonLength, gen = "u", randomness = 1) {
checkGenderAssignment(gen)
gender <- genderAssignment(gen)
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
lastPhons <- mPhons[mPhons$canBeLast, "phoneme"]
if (gen == "m") lastPhons <- lastPhons[mPhons$male, "phoneme"]
if (gen == "f") lastPhons <- lastPhons[mPhons$female, "phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gen
gName$like <- as.logical(NA)
return(gName)
}
generateName(3, "f")
ghetprint.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is:", gN$name
,"\n\nThis is a", gen, "name")
invisible(output)
}
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
return(gN)
}
generateName <- function(phonLength, gen = "u", randomness = 1) {
checkGenderAssignment(gen)
gender <- genderAssignment(gen)
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
lastPhons <- mPhons[mPhons$canBeLast,]
if (gen == "m") lastPhons <- lastPhons[mPhons$male, "phoneme"]
if (gen == "f") lastPhons <- lastPhons[mPhons$female, "phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gen
gName$like <- as.logical(NA)
return(gName)
}
generateName(3, "f")
generateName(3, "m")
makePhoneme("wyk", FALSE, FALSE, TRUE, "m")
makePhoneme("wyk", FALSE, FALSE, TRUE, "m")
mPhons <- getMasterPhonemes()
checkGenderAssignment(gen)
checkGenderAssignment("m")
ghetClose()
ghetInit()
checkGenderAssignment("m")
makePhoneme("wyk", FALSE, FALSE, TRUE, "m")
makePhoneme("wyk", FALSE, FALSE, TRUE, "m")
gen
q
debug(makePhoneme)
makePhoneme("wyk", FALSE, FALSE, TRUE, "m")
makePhoneme("wyk", FALSE, FALSE, TRUE, "m")
debug(checkGenderAssignment)
makePhoneme("wyk", FALSE, FALSE, TRUE, "m")
exit
rm(gen)
rm(gender)
makePhoneme("wyk", FALSE, FALSE, TRUE, "m")
rm(list = ls())
ghetInit <- function() {
source("environmentControls.R")
source("commonValidations.R")
source("commonActions.R")
source("generateName.R")
assign("GhetNameEnv", new.env(), envir=.GlobalEnv)
if (is.null(get0("MasterPhonemes", envir=GhetNameEnv))) {
if (!(file.exists("MasterPhonemes.txt"))) {
stop("Missing Master Phonemes File")
}
assign("MasterPhonemes", envir = GhetNameEnv
, read.csv("MasterPhonemes.txt"
, header = TRUE
, stringsAsFactors = FALSE))
# TO DO - get performance/probablities
}
}
ghetClose <- function() {
# NB Right now concurrency = 1
if (nrow(GhetNameEnv$MasterPhonemes) > 0) {
write.csv(GhetNameEnv$MasterPhonemes, "MasterPhonemes.txt", row.names = FALSE)
}
rm(GhetNameEnv, envir = .GlobalEnv)
# TO DO - keep all the functions in the environment and get rid of everything on exit
}
ghetInit()
makePhoneme("wyk", FALSE, FALSE, TRUE, "m")
ghetClose()
ghetInit()
generateName(2, "m")
generateName(2, "m")
me <- generateName(2)
me
me
ghetprint.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is:", gN$name
,"\n\nThis is a", gen, "name")
invisible(output)
}
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
return(gN)
}
generateName <- function(phonLength, gen = "u", randomness = 1) {
checkGenderAssignment(gen)
gender <- genderAssignment(gen)
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
lastPhons <- mPhons[mPhons$canBeLast,]
if (gen == "m") lastPhons <- lastPhons[mPhons$male,]
if (gen == "f") lastPhons <- lastPhons[mPhons$female,]
lastPhons <- lastPhons[,"phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gen
gName$like <- as.logical(NA)
return(gName)
}
generateName(2, "m")
me <- generateName(3)
me
me <- generateName(3)
me
generateName(3)
print.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is:", gN$name
,"\n\nThis is a", gen, "name")
invisible(output)
}
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
return(gN)
}
generateName <- function(phonLength, gen = "u", randomness = 1) {
checkGenderAssignment(gen)
gender <- genderAssignment(gen)
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
lastPhons <- mPhons[mPhons$canBeLast,]
if (gen == "m") lastPhons <- lastPhons[mPhons$male,]
if (gen == "f") lastPhons <- lastPhons[mPhons$female,]
lastPhons <- lastPhons[,"phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gen
gName$like <- as.logical(NA)
return(gName)
}
generateName(3)
generateName(3)
rm(list = ls())
ghetInit()
ghetInit <- function() {
source("environmentControls.R")
source("commonValidations.R")
source("commonActions.R")
source("generateName.R")
assign("GhetNameEnv", new.env(), envir=.GlobalEnv)
if (is.null(get0("MasterPhonemes", envir=GhetNameEnv))) {
if (!(file.exists("MasterPhonemes.txt"))) {
stop("Missing Master Phonemes File")
}
assign("MasterPhonemes", envir = GhetNameEnv
, read.csv("MasterPhonemes.txt"
, header = TRUE
, stringsAsFactors = FALSE))
# TO DO - get performance/probablities
}
}
ghetClose <- function() {
# NB Right now concurrency = 1
if (nrow(GhetNameEnv$MasterPhonemes) > 0) {
write.csv(GhetNameEnv$MasterPhonemes, "MasterPhonemes.txt", row.names = FALSE)
}
rm(GhetNameEnv, envir = .GlobalEnv)
# TO DO - keep all the functions in the environment and get rid of everything on exit
}
ghetInit()
generateName(4)
GhetNameEnv$MasterPhonemes
print.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is:", gN$name
,"\n\nThis is a", gen, "name")
invisible(output)
}
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
return(gN)
}
generateName <- function(phonLength, gen = "u", randomness = 1) {
checkGenderAssignment(gen)
gender <- genderAssignment(gen)
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
if (gen == "u") lastPhons <- lastPhons[mPhons$male | mPhons$female, "phoneme"]
if (gen == "m") lastPhons <- lastPhons[mPhons$male, "phoneme"]
if (gen == "f") lastPhons <- lastPhons[mPhons$female, "phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gen
gName$like <- as.logical(NA)
return(gName)
}
generateName(4)
print.ghetName <- function (gN) {
gen <- ifelse(gN$gender == "f", "girl's"
, ifelse(gN$gender == "m", "boy's"
, "unisex"))
output <- cat("Your name is:", gN$name
,"\n\nThis is a", gen, "name")
invisible(output)
}
"[<-.ghetName" <- function(gN, subscript, value) {
gN$phonList[subscript] <- value
gN$name <- paste0(gN$phonList, collapse = "")
print(gN)
return(gN)
}
generateName <- function(phonLength, gen = "u", randomness = 1) {
checkGenderAssignment(gen)
gender <- genderAssignment(gen)
numPhons <- ifelse(phonLength < 2, 2, phonLength - 2)
mPhons <- getMasterPhonemes()
firstPhons <- mPhons[mPhons$canBeFirst == TRUE, "phoneme"]
if (gen == "u") lastPhons <- mPhons[mPhons$male | mPhons$female, "phoneme"]
if (gen == "m") lastPhons <- mPhons[mPhons$male, "phoneme"]
if (gen == "f") lastPhons <- mPhons[mPhons$female, "phoneme"]
first <- sample(firstPhons, 1)
first <- paste0(toupper(substr(first, 1, 1)), substr(first, 2, nchar(first)))
phonList <- character(0)
mids <- character(0)
if (numPhons > 0) {
for (i in 1:numPhons) {
mid <- sample(mPhons$phoneme, 1)
mids <- paste0(mids, mid)
phonList <- c(phonList, mid)
}
}
last <- sample(lastPhons, 1)
gName <- list()
class(gName) <- "ghetName"
gName$name <- paste0(first, mids, last)
gName$phonList <- c(first, phonList, last)
gName$phonLength <- phonLength
gName$gender <- gen
gName$like <- as.logical(NA)
return(gName)
}
generateName(4)
generateName(4, "f")
generateName(4, "f")
generateName(4, "f")
generateName(2, "m")
generateName(2, "m")
generateName(2, "m")
generateName(2, "m")
ghetClose()
